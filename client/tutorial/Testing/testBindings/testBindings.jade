template(name='testBindings')
  a.bookmark(id='testBindingsBk')
  .section
    h1 Testing Your Bindings
    p After testing your code (the view models) the next step is to make sure the templates are bound properly. The idea is that if your code is working and the bindings are in place, then you don't have to go through all permutations when you perform your user tests with Selenium (or whatever else you use).
    p To test a bind you use the elementBind method and pass a CSS selector to locate the element that has the bind. If the template requires a context you can pass it as a second parameter.
    pre.
      Template.name.elementBind( cssSelector, optionalContext )

    h2 Example
    p Let's say you have the following template/view. It has an input for the name and a button that is enabled if name has something:
    pre.
      &lt;template name=&quot;main&quot;&gt;
        Name: &lt;input type=&quot;text&quot; data-bind=&quot;value: name&quot;&gt;
        &lt;button data-bind=&quot;enabled: canEnter&quot;&gt;Enter&lt;/button&gt;
      &lt;/template&gt;
    p You can then test that each element is properly bound. Here we're using Mocha but of course you can use any other testing framework.
    pre.
      <b>describe("Main Bindings"</b>, function() {
        <b>it("should bind name input"</b>, function () {
          var bind = Template.main.elementBind("input");
          chai.assert.isTrue(<b>_.isEqual(bind, { value: "name" })</b>);
        });

        <b>it("should bind enter button"</b>, function () {
          var bind = Template.main.elementBind("button");
          chai.assert.isTrue(<b>_.isEqual(bind, { enabled: "canEnter" })</b>);
        });
      });
    p A few things to notice:
    ul
      li Templates are usually small so most of the time you can get by without element ids.
      li The templates are rendered before extracting the bindings. That means if there are sub-templates then they will get rendered too. Keep this in mind when using your selectors.
      li You can pass an optional object as a second parameter to elementBind if a template requires a context.
      li ViewModel converts data-bind attributes to simple (very simple) objects with string values. That's why data-bind="value: name" is converted to { value: "name" }