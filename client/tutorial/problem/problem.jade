template(name='problem')
  a.bookmark(id='problemBk')
  .section
    h1.text-center Declarative > Imperative
    h1.text-center Reactive > Event Driven
    h2 The Problem
    p Meteor is a leap forward in web development but one aspect that has remained behind is the way you deal with UI events. I'm referring to the interactions with the user and between UI elements. Right now it's done in an event driven fashion. You listen for events, then run a piece of code that does something, you then update the UI in some way. Develop any interactive UI and you end up with many, many levers and knobs that you have to synchronize to get the experience you want.
    h2 The solution
    p The solution is to use an MVVM like pattern: You keep the state of the UI in a javascript object and bind the UI elements to properties of that object. You declare what happens and when it happens, and then Meteor will update the UI accordingly and best of all... reactively.

    h3 Install
    pre meteor add manuel:viewmodel
    br
    h4 Q: Isn't this like KnockoutJS?
    p Yep, you can think of ViewModel as "Knockout for Meteor".
    h4 Q: So what's the difference?
    p ViewModel uses Meteor's reactivity and thus properties and methods are reactive sources. Knockout observables only work for Knockout's computed values. Another nicety is that you don't need to use ko.observable or ko.computed, you just use plain JS properties and functions. Last but not least, ViewModel is only 6KB (2KB gzip) as opposed to Knockout's 47KB (17KB gzip).