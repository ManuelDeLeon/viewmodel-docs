template(name='delay')
  a.bookmark(id='delayBk')
  .section
    h1 delay Binding
    p It delays updating the viewmodel by the given milliseconds. At the moment, it requires the use of the value binding on the element.
    p This is most useful when you want to do something after the user has stopped typing on an input.
    .row
      input.pull-left(type='text', placeholder="Type something...", data-bind="value: message, delay: 1000")
      div.pull-left(data-bind="text: message")

  .section
    h2 Code
    ul.nav.nav-pills
      li.active
        a(href="#delay-jade", data-toggle="tab") Jade
      li
        a(href="#delay-html", data-toggle="tab") Html
    div.tab-content
      div#delay-jade.tab-pane.fade
        pre.
          template(name='delay')
            <b>input</b>(type='text', placeholder="Type something...", data-bind="value: message, <b>delay: 1000</b>")
            div(data-bind="text: message")
      div#delay-html.tab-pane.fade.active.in
        pre.
          &lt;template name=&quot;delay&quot;&gt;
            &lt;input type=&quot;text&quot; data-bind=&quot;value: message, delay: 1000&quot;/&gt;
            &lt;div data-bind=&quot;text: message&quot;&gt;&lt;/div&gt;
          &lt;/template&gt;
    ul.nav.nav-pills
      li.active
        a(href="#delay-coffee", data-toggle="tab") Coffeescript
      li
        a(href="#delay-js", data-toggle="tab") Javascript
    div.tab-content
      div#delay-coffee.tab-pane.fade
        pre.
          Template.delay.rendered = ->
            new ViewModel(
              message: ''
            ).bind @
      div#delay-js.tab-pane.fade.active.in
        pre.
          Template.delay.rendered = function() {
            return new ViewModel({
              message: ''
            }).bind(this);
          };