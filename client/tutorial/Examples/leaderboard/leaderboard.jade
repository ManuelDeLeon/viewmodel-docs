template(name='leaderboard')
  a.bookmark(id='leaderboardBk')
  #leaderboard
    .section
      h1 Leaderboard Example
      each players
        +player
      hr
      button.btn(data-bind="visible: selected, click: addPoints") Add 5 points
      div(data-bind="visible: !selected") Please select a player

    .section
      h2 Code
      ul.nav.nav-pills
        li
          a(href="#leaderboard-jade", data-toggle="tab") Jade
        li.active
          a(href="#leaderboard-html", data-toggle="tab") Html
      div.tab-content
        div#leaderboard-jade.tab-pane.fade
          pre.
            <b>template(name='leaderboard')</b>
              <b>&#101;ach players</b>
                <b>&#43;player</b>
              <b>button</b>(data-bind="<b>visible: selected, click: addPoints</b>") Add 5 points
              <b>div</b>(data-bind="<b>visible: !selected</b>") Please select a player

            <b>template(name='player')</b>
              <b>div</b>.player(data-bind="<b>text: info, click: select, class: { selected: isSelected }</b>")
        div#leaderboard-html.tab-pane.fade.active.in
          pre.
            <b>&lt;template name=&quot;leaderboard&quot;&gt;</b>
              <b>&#123;{#each players}}</b>
                <b>&#123;{> player}}</b>
              &#123;{/each}}
              &lt;<b>button</b> data-bind=&quot;<b>visible: selected, click: addPoints</b>&quot;&gt;Add 5 points&lt;/button&gt;
              &lt;<b>div</b> data-bind=&quot;<b>visible: !selected</b>&quot;&gt;Please select a player&lt;/div&gt;
            &lt;/template&gt;

            <b>&lt;template name=&quot;player&quot;&gt;</b>
              &lt;<b>div</b> data-bind=&quot;<b>text: info, click: select, class: { selected: isSelected }</b>&quot; class=&quot;player&quot;&gt;&lt;/div&gt;
            &lt;/template&gt;

      ul.nav.nav-pills
        li
          a(href="#leaderboard-coffee", data-toggle="tab") Coffeescript
        li.active
          a(href="#leaderboard-js", data-toggle="tab") Javascript
      div.tab-content
        div#leaderboard-coffee.tab-pane.fade
          pre.
            Template.leaderboard.onCreated ->
              this.subscribe 'players'

            Template.<b>leaderboard.viewmodel</b> 'leaderboard',
              <b>players:</b> -> Players.find {}, { sort: { score:-1, name: 1 } }
              <b>selected:</b> null
              <b>addPoints:</b> -> Players.update @selected(), { $inc: { score: 5 } }
            , <b>'players'</b>

            Template.<b>player.viewmodel</b> (data) ->
              id: data._id
              player: -> Players.findOne(@id())
              select: -> <b>@parent()</b>.selected @id()
              isSelected: -> <b>@parent()</b>.selected() is @id()
              info: -> @player().score + ' ' + @player().name


        div#leaderboard-js.tab-pane.fade.active.in
          pre.
            Template.leaderboard.onCreated(function() {
              this.subscribe("players");
            });

            Template.<b>leaderboard.viewmodel</b>(
              <b>'leaderboard'</b>,
              {
                <b>players</b>: function() {
                  return Players.find({}, { sort: { score:-1, name: 1 } });
                },
                <b>selected</b>: null,
                <b>addPoints</b>: function() {
                  Players.update(this.selected(), { $inc: { score: 5 } });
                }
              },
              <b>'players'</b>
            );

            Template.<b>player.viewmodel</b>( function(data) {
              return {
                id: data._id,
                player: function() {
                  return Players.findOne(this.id());
                },
                select: function() {
                  <b>this.parent()</b>.selected(this.id());
                },
                isSelected: function() {
                  <b>return this.parent()</b>.selected() === this.id();
                },
                info: function() {
                  return this.player().score + ' ' + this.player().name;
                }
              };
            });


      h2 What's going on...
      h3 viewmodel
      pre.
        Template.<b>leaderboard.viewmodel</b>(
          'leaderboard',
          ...
      p.
        We create the viewmodel for the leaderboard template and give it a name so the state persists over hot code pushes.
        <br>See: #[a(href="#definingBk") Misc -> Defining View Models] and #[a(href="#sessionBk") Misc -> Hot Code Pushes]

      h3 players helper
      pre.
        Template.leaderboard.viewmodel(
          'leaderboard',
          {
            <b>players</b>: function() {
              return Players.find( {}, { sort: { score:-1, name: 1 } } );
            }
            ...
          },
          'players'
        );
      p We add the players method which returns a reactive cursor. We're passing 3 parameters to the viewmodel method: 1) the name, 2) the viewmodel object, and 3) the property we want to use as a template helper. In this case ViewModel adds the players property as a template helper (that's why the template can use &#123;{#each players}}).

      h3 binding the leaderboard template
      p ViewModel automatically binds the html elements with a "data-bind" attribute to the viewmodel. It happens in the rendered event because it needs the actual html elements to be present on the page.
      h3 player viewmodel
      pre.
        Template.player.viewmodel( function(data) {
          return {
            id: data._id,
            player: function() {
              return Players.findOne(this.id());
            },
            select: function() {
              this.parent().selected(this.id());
            },
            isSelected: function() {
              return this.parent().selected() === this.id();
            },
            info: function() {
              return this.player().score + ' ' + this.player().name;
            }
          };
        });
      p Here we're creating a player viewmodel for each of the players rendered. We're only passing 1 parameter to the viewmodel method: a function that takes in the template's data context. That is the context given by the #each loop in the parent/leaderboard template. In this case we use it to extract the player _id and give it to the id property. That's why the rest of the viewmodel can use this.id().
      p this.parent() refers to the viewmodel directly above the current one. In this case this.parent() refers to the leaderboard viewmodel.
      p Then we add the properties and methods we want it to have (player, select, isSelected, and info). The player property returns a single player object taken from the Players collection. We do this so its properties are reactively updated when the database changes. Remember that findOne is the reactive function, the object properties returned by findOne are not.
      p We don't give a name to the viewmodel because all properties as functions so there's no state to maintain.


template(name='player')
  div.player(data-bind="text: info, click: select, class: { selected: isSelected }")
